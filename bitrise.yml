format_version: "3"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: ""
app:
  envs:
  - A_SECRET_PARAM: $A_SECRET_PARAM
  - BITRISE_STEP_ID: firebase-test-lab
  - BITRISE_STEP_VERSION: 0.0.1
  - BITRISE_STEP_GIT_CLONE_URL: https://github.com/bitrise-community/steps-firebase-test-lab
  - MY_STEPLIB_REPO_FORK_GIT_URL: $MY_STEPLIB_REPO_FORK_GIT_URL
workflows:
  _install_testing_tools:
    title: Install testing tools
    description: Install all the tools used for running the tests
    steps:
    - script:
        title: Install testing tools
        run_if: .IsCI
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            # Install dependencies
            go get -u github.com/tools/godep

            # Check for unhandled errors
            go get -u github.com/kisielk/errcheck

            # Go lint
            go get -u github.com/golang/lint/golint

            # Check for unused constants, variables, functions and types
            go get -u honnef.co/go/tools/cmd/unused

            # Search for what could be simplified
            go get -u honnef.co/go/tools/cmd/gosimple
  audit-this-step:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            stepman audit --step-yml ./step.yml
  deps-update:
    title: Godeps update
    description: |
      Used for updating Go dependencies with godep
    steps:
    - script:
        title: godep update
        inputs:
        - content: |
            #!/bin/bash
            set -ex
            go get -u -v github.com/tools/godep

            rm -rf ./Godeps
            rm -rf ./vendor

            go get -t -d ./...
            go get github.com/davecgh/go-spew/spew
            go get github.com/pmezard/go-difflib/difflib
            godep save ./...
  run-this-step:
    steps:
    - script:
        inputs:
        - content: |
            #!/bin/bash
            echo "Just an example 'secrets' print."
            echo "The value of 'A_SECRET_PARAM' is: $A_SECRET_PARAM"
    - change-workdir:
        title: Switch working dir to test / _tmp dir
        description: |-
          To prevent step testing issues, like referencing relative
          files with just './some-file' in the step's code, which would
          work for testing the step from this directory directly
          but would break if the step is included in another `bitrise.yml`.
        run_if: "true"
        inputs:
        - path: ./_tmp
        - is_create_path: true
    - path::./:
        title: Step Test
        description: |-
          The example input has a default value,
          you can overwrite it if you want to, just like we did below,
          but the step would use the default value specified in the `step.yml`
          file if you would not specify another value.
        run_if: "true"
        inputs:
        - example_step_input: Example Step Input's value
    - script:
        inputs:
        - content: |
            #!/bin/bash
            echo "This output was generated by the Step (EXAMPLE_STEP_OUTPUT): $EXAMPLE_STEP_OUTPUT"
  share-this-step:
    description: |-
      If this is the first time you try to share a Step you should
      first call: $ bitrise share

      This will print you a guide, and information about how Step sharing
      works. Please read it at least once!

      As noted in the Step sharing guide you'll have to fork the
      StepLib you want to share this step into. Once you're done with forking
      the repository you should set your own fork's git clone URL
      in the `.bitrise.secrets.yml` file, or here in the `envs` section,
      as the value of the `MY_STEPLIB_REPO_FORK_GIT_URL` environment.

      You're now ready to share this Step, just make sure that
      the `BITRISE_STEP_ID` and `BITRISE_STEP_VERSION`
      environments are set to the desired values!

      To share this Step into a StepLib you can just run: $ bitrise run share-this-step

      Once it finishes the only thing left is to actually create a Pull Request,
      the way described in the guide printed at the end of the process.
    before_run:
    - audit-this-step
    envs:
    - MY_STEPLIB_REPO_FORK_GIT_URL: $MY_STEPLIB_REPO_FORK_GIT_URL
    - BITRISE_STEP_ID: $BITRISE_STEP_ID
    - BITRISE_STEP_VERSION: $BITRISE_STEP_VERSION
    - BITRISE_STEP_GIT_CLONE_URL: $BITRISE_STEP_GIT_CLONE_URL
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            bitrise share start -c "${MY_STEPLIB_REPO_FORK_GIT_URL}"
            bitrise share create --stepid "${BITRISE_STEP_ID}" --tag "${BITRISE_STEP_VERSION}" --git "${BITRISE_STEP_GIT_CLONE_URL}"
            bitrise share finish
  test:
    before_run:
    - _install_testing_tools
    steps:
    - script:
        title: Print go environment
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            go version
    - script:
        title: Export go files to test
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            no_vendor_paths="$(go list ./... | grep -v vendor)"
            envman add --key GOLIST_WITHOUT_VENDOR --value "$no_vendor_paths"
    - script:
        title: Err check
        inputs:
        - content: errcheck -asserts=true -blank=true $GOLIST_WITHOUT_VENDOR
    - script:
        title: Go lint
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            while read -r line; do
              echo "-> Linting: $line"
              golint_out="$(golint $line)"
              if [[ "${golint_out}" != "" ]] ; then
                echo "=> Golint issues found:"
                echo "${golint_out}"
                exit 1
              fi
            done <<< "$GOLIST_WITHOUT_VENDOR"
    - script:
        title: Search for unused constants, variables, functions and types
        inputs:
        - content: |-
            #!/bin/bash
            unused_out=$(for pkg in $(go list ./... | grep -v vendor); do unused "$pkg"; done)
            if [[ "${unused_out}" != "" ]] ; then
              echo "=> Unused output:"
              echo "${unused_out}"
              exit 1
            fi
    - script:
        title: Run gosimple
        inputs:
        - content: |-
            #!/bin/bash
            gosimple_out=$(for pkg in $(go list ./... | grep -v vendor); do gosimple "$pkg"; done)
            if [[ "${gosimple_out}" != "" ]] ; then
              echo "=> gosimple output:"
              echo "${gosimple_out}"
              exit 1
            fi
    - script:
        title: Go test
        inputs:
        - content: go test ./...
